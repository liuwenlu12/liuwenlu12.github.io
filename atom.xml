<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liuwenlu12.github.io/</id>
    <title>Gridea</title>
    <updated>2019-12-15T14:06:22.120Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liuwenlu12.github.io/"/>
    <link rel="self" href="https://liuwenlu12.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liuwenlu12.github.io//images/avatar.png</logo>
    <icon>https://liuwenlu12.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Hadoop]]></title>
        <id>https://liuwenlu12.github.io//post/ce-shi</id>
        <link href="https://liuwenlu12.github.io//post/ce-shi">
        </link>
        <updated>2019-11-11T12:23:57.000Z</updated>
        <content type="html"><![CDATA[<p>简介<br>
MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p>添加依赖<br>
<dependency><br>
<groupId>com.baomidou</groupId><br>
<artifactId>mybatis-plus-boot-starter</artifactId><br>
<version>3.1.2</version><br>
</dependency><br>
特性<br>
无侵入：<br>
只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</p>
<p>损耗小：<br>
启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p>
<p>强大的 CRUD 操作：<br>
内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</p>
<p>支持 Lambda 形式调用：<br>
通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</p>
<p>支持主键自动生成：<br>
支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</p>
<p>支持 ActiveRecord 模式：<br>
支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</p>
<p>支持自定义全局通用操作：<br>
支持全局通用方法注入（ Write once, use anywhere ）</p>
<p>内置代码生成器：<br>
采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</p>
<p>内置分页插件：<br>
基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</p>
<p>分页插件支持多种数据库：<br>
支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</p>
<p>内置性能分析插件：<br>
可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</p>
<p>内置全局拦截插件：<br>
提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</p>
<p>通用Mapper<br>
实体类Book.java<br>
@TableName(&quot;book&quot;) //当数据库表名与实体类不同时<br>
public class Book {<br>
//使用TableId注解标记主键对应的属性<br>
//value：主键的字段名<br>
//type：主键的生成策略，IdType.AUTO：使用数据库的自增<br>
@TableId(value = &quot;id&quot;,type = IdType.AUTO)<br>
private Long id;<br>
private String name;<br>
private String author;<br>
private Double price;<br>
@TableLogic //逻辑删除<br>
private Integer  status;<br>
@TableField(exist = false) //当此属性在表中没有时<br>
priver  String NO;<br>
//省略getter和setter<br>
}<br>
让Mapper接口继承自BaseMapper接口</p>
<p>import com.baomidou.mybatisplus.core.mapper.BaseMapper;<br>
import com.oaec.springbootmp.entity.Book;</p>
<p>public interface BookMapper extends BaseMapper<Book> {<br>
}<br>
测试根据编号查询<br>
@SpringBootTest<br>
public class SpringbootMpApplicationTests {</p>
<pre><code>@Autowired
private BookMapper bookMapper;

@Test
public void contextLoads() {
    Book book = bookMapper.selectById(1001);
    System.out.println(&quot;book = &quot; + book);
}
</code></pre>
<p>}<br>
增删改<br>
插入数据<br>
Book book = new Book();<br>
book.setName(&quot;红楼梦&quot;);<br>
book.setAuthor(&quot;曹雪芹&quot;);<br>
book.setPrice(19.92);<br>
//返回值代表影响数据库的行数<br>
int insert = bookMapper.insert(book);<br>
System.out.println(&quot;insert = &quot; + insert);<br>
//插入成功之后自动将生成的主键保存在主键对应的属性<br>
System.out.println(&quot;book = &quot; + book);<br>
根据主键更新<br>
Book book = new Book();<br>
book.setId(1003L);<br>
//        book.setName(&quot;三国演义&quot;);<br>
book.setAuthor(&quot;罗贯中&quot;);<br>
//根据主键进行数据更新，只会更新赋值的属性，值为null的属性不会进行修改<br>
int i = bookMapper.updateById(book);<br>
System.out.println(&quot;i = &quot; + i);<br>
自定义条件更新数据</p>
<p>Book book = new Book();<br>
book.setPrice(10D);<br>
//将价格大于20的书，价格修改为10<br>
//第一个参数的属性会拼接在set之后，第二个参数的条件会拼接在where之后<br>
int update = bookMapper.update(book,<br>
Wrappers.<Book>lambdaUpdate().gt(Book::getPrice, 20));<br>
System.out.println(&quot;update = &quot; + update);<br>
根据主键删除<br>
bookMapper.deleteById(1161463992506478594L);<br>
根据主键批量删除<br>
List<Long> idList = Arrays.asList(1006L, 1007L);<br>
int i = bookMapper.deleteBatchIds(idList);<br>
使用Map作为条件删除<br>
Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();<br>
map.put(&quot;name&quot;,&quot;西游记&quot;);<br>
int i = bookMapper.deleteByMap(map);<br>
使用条件构造器删除<br>
int delete = bookMapper.delete(Wrappers.<Book>lambdaUpdate()<br>
.lt(Book::getPrice, 20));<br>
查询<br>
根据主键查询<br>
Book book = bookMapper.selectById(1003)<br>
查询全部<br>
List<Book> books = bookMapper.selectList(null);<br>
自定义查询条件<br>
//查询价格大于10元的书<br>
List<Book> books = bookMapper.selectList(Wrappers.<Book>lambdaQuery()<br>
.gt(Book::getPrice, 10));<br>
//查询价格大于10元的书，书名为“三国演义”<br>
List<Book> books = bookMapper.selectList(Wrappers.<Book>lambdaQuery()<br>
.gt(Book::getPrice, 10)<br>
.eq(Book::getName, &quot;三国演义&quot;));<br>
//查询书名包含“三”的书<br>
List<Book> books = bookMapper.selectList(Wrappers.<Book>lambdaQuery()<br>
.like(Book::getName, &quot;三&quot;));<br>
//查询书名以“三”开头的书<br>
List<Book> books = bookMapper.selectList(Wrappers.<Book>lambdaQuery()<br>
.likeRight(Book::getName, &quot;三&quot;));<br>
分页查询<br>
配置类：MybatisPlusConfig<br>
/**</p>
<ul>
<li>配置类<br>
*/<br>
@Configuration<br>
public class MybatisPlusConfig {<br>
@Bean<br>
public PaginationInterceptor paginationInterceptor(){<br>
return new PaginationInterceptor();<br>
}<br>
}<br>
查询第1页，每页2条<br>
//查询结果为实体类型<br>
IPage<Book> page = bookMapper.selectPage(new Page<Book>(1, 2), null);<br>
//查询结果为Map类型<br>
IPage&lt;Map&lt;String, Object&gt;&gt; page = bookMapper.selectMapsPage(new Page&lt;&gt;(1, 2), null);<br>
IPage接口<br>
List getRecords(); 获取查询记录<br>
long getTotal(); 获取总数量<br>
long getPages() 获取总页数<br>
通用Service<br>
Service接口继承IService<br>
import com.baomidou.mybatisplus.extension.service.IService;<br>
import com.oaec.springbootmp.entity.Book;</li>
</ul>
<p>public interface BookService extends IService<Book> {<br>
}<br>
Service实现类继承ServiceImpl，实现自己的Service接口<br>
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br>
import com.oaec.springbootmp.entity.Book;<br>
import com.oaec.springbootmp.mapper.BookMapper;<br>
import com.oaec.springbootmp.service.BookService;<br>
import org.springframework.stereotype.Service;</p>
<p>@Service(&quot;bookService&quot;)<br>
public class BookServiceImpl extends ServiceImpl&lt;BookMapper, Book&gt; implements BookService {<br>
}<br>
逻辑删除<br>
application.yml配置文件中配置代表是否删除的数值<br>
mybatis-plus:<br>
global-config:<br>
db-config:<br>
logic-delete-value: 0 # 逻辑已删除值(默认为 0)<br>
logic-not-delete-value: 1 # 逻辑未删除值(默认为 1)<br>
实体中表示是否删除的属性添加注解<br>
public class Book {<br>
@TableId(type = IdType.AUTO)<br>
private Long id;<br>
private String name;<br>
private Double price;<br>
//逻辑删除字段<br>
@TableLogic<br>
private Integer status;<br>
private Timestamp createTime;<br>
//省略getter和setter<br>
}<br>
执行查询<br>
List<Book> books = bookMapper.selectList(null);<br>
books.forEach(System.out::println);<br>
​	执行的SQL</p>
<p>SELECT id,name,price,status,create_time FROM book WHERE status=1<br>
执行删除<br>
int i = bookMapper.deleteById(1L);<br>
System.out.println(&quot;i = &quot; + i);<br>
​	执行的SQL</p>
<p>UPDATE book SET status=0 WHERE id=? AND status=1<br>
备注<br>
jdk1.8才支持lambda表达式，如果使用jdk1.8之前的版本，可以使用Wrappers.query()<br>
List<Book> books = bookMapper.selectList(Wrappers.<Book>query().like(&quot;name&quot;, &quot;三&quot;));<br>
for (Book book : books) {<br>
System.out.println(&quot;book = &quot; + book);<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://liuwenlu12.github.io//post/hello-gridea</id>
        <link href="https://liuwenlu12.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>